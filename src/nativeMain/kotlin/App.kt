/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
import kotlinx.cinterop.ByteVar
import kotlinx.cinterop.CValuesRef
import kotlinx.interop.wasm.dom.MouseEvent
import kotlinx.interop.wasm.dom.asCanvas
import kotlinx.interop.wasm.dom.document
import kotlinx.interop.wasm.dom.setInterval
import kotlinx.wasm.jsinterop.JsValue
import org.mvnsearch.wasm.demo.Welcome

/**
 * main entrance for WebAssembly
 */
fun main() {
    //print welcome in console
    println(Welcome().hello())
    //operate Demo
    val demo = jq("#Demo").asTag()
    demo.attr("href", "#")
    demo.onclick {
        println("mouse clicked!")
        demo.text("You clicked me!")
    }
    //draw canvas
    drawCanvas()
}

fun drawCanvas() {
    val canvas = jq("#myCanvas").asCanvas
    val ctx = canvas.getContext("2d")
    val rect = canvas.getBoundingClientRect()
    val rectLeft = rect.left
    val rectTop = rect.top

    var mouseX: Int = 0
    var mouseY: Int = 0
    var draw: Boolean = false

    document.onmousemove { arguments: ArrayList<JsValue> ->
        val event = MouseEvent(arguments[0])
        mouseX = event.getInt("clientX") - rectLeft
        mouseY = event.getInt("clientY") - rectTop
        if (mouseX < 0) mouseX = 0
        if (mouseX > 639) mouseX = 639
        if (mouseY < 0) mouseY = 0
        if (mouseY > 479) mouseY = 479
    }

    document.onmousedown {
        draw = true
    }

    document.onmouseup {
        draw = false
    }

    setInterval(10) {
        if (draw) {
            ctx.strokeStyle = "red"
            ctx.lineTo(mouseX, mouseY)
            ctx.stroke()
        } else {
            ctx.moveTo(mouseX, mouseY)
            ctx.stroke()
        }
    }
}


/**
 * argument types:  int, double https://github.com/WebAssembly/design/blob/master/Semantics.md#types
 */
@Retain
fun hello() {
    println("Hello from Kotlin")
}
